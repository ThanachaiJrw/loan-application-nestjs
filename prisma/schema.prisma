generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MAKER
  CHECKER
  APPROVER
  ADMIN
}

model User {
  username  String   @id
  password  String
  role      Role     @default(USER)
  email     String   @unique
  name      String
  createBy  String
  createdDt DateTime @default(now())

  createLoans LoanApplication[] @relation("LoanCreateBy")
  updateLoans LoanApplication[] @relation("LoanUpdateBy")
  createActions LoanAppAction[] @relation("ActionCreateBy")
  updateActions LoanAppAction[] @relation("ActionUpdateBy")
  createCustomer Customer[] @relation("CustomerCreateBy")
  updateCustomer Customer[] @relation("CustomerUpdateBy")
  createAttachments LoanAttachment[] @relation("AttachUploadBy")
  @@map("loan_users")
}

model LoanApplication {
  appNo          String     @id @default(uuid()) @map("app_no")
  customerNo  String @map("customer_no")
  loanAmt       Float @map("loan_amt")
  status        String @default("100")
  createBy      String @map("create_by")
  createDt      DateTime @default(now()) @map("create_dt")
  updateBy      String? @map("update_by")
  updateDt      DateTime? @map("update_dt")

  loanAppActions LoanAppAction[]
  loanAppAttachments LoanAttachment[]
  customer Customer @relation(fields: [customerNo], references: [customerNo])
  loanCreateBy User @relation("LoanCreateBy",fields: [createBy], references: [username])
  loanUpdateBy User? @relation("LoanUpdateBy",fields: [updateBy], references: [username])
  @@map("loan_applications")
}

model LoanAppAction {
  actionId  String      @id @default(uuid()) @map("action_id")
  appNo     String @map("app_no")
  seq     Int
  actionType String @map("action_type")
  desc       String
  createBy      String @map("create_by")
  createDt      DateTime @default(now()) @map("create_dt")
  updateBy      String? @map("update_by")
  updateDt      DateTime? @map("update_dt")

  loanApp LoanApplication @relation(fields: [appNo], references: [appNo])
  actionCreateBy User @relation("ActionCreateBy",fields: [createBy], references: [username])
  actionUpdateBy User? @relation("ActionUpdateBy",fields: [updateBy], references: [username])
  @@map("loan_app_actions")
}

model LoanAttachment {
  attachmentId String   @id @default(uuid()) @map("attachment_id")
  appNo     String @map("app_no")
  seq         Int
  docType    String @map("doc_type")
  fileName   String @map("file_name")
  filePath   String @map("file_path")
  fileType   String @map("file_type")
  uploadedBy   String @map("uploaded_by")
  uploadedDt   DateTime @default(now()) @map("uploaded_dt")

  loanApp LoanApplication @relation(fields: [appNo], references: [appNo])
  AttachupdloadedBy User @relation("AttachUploadBy",fields: [uploadedBy], references: [username])
  @@map("loan_attachments")
}

model Customer {
  customerNo String   @id @map("customer_no")
  customerName String @map("customer_name")
  idCard     String   @unique @map("id_card")
  dob         DateTime
  phone       String
  email       String   @unique
  address     String
  province     String
  district     String
  subdistrict  String
  createBy      String @map("create_by")
  createDt      DateTime @default(now()) @map("create_dt")
  updateBy      String? @map("update_by")
  updateDt      DateTime? @map("update_dt")

  loanApps LoanApplication[]
  cusCreateBy User @relation("CustomerCreateBy",fields: [createBy], references: [username])
  cusUpdateBy User? @relation("CustomerUpdateBy",fields: [updateBy], references: [username])
  @@map("customer_info")
}

// fix tomorrow and dr diagram
model Geography {
  geoNo String @id @map("geo_no")
  name String

  province Province[]
  @@map("geographies")
}
model Province {
  provinceNo String @id @map("province_no")
  provinceCode String @unique @map("province_code")
  provinceThName String @map("province_th_name")
  provinceEnName String @map("province_en_name")
  geoNo String @map("geo_no")

  geography Geography @relation(fields: [geoNo], references: [geoNo])
  districts District[]
  @@map("provinces")
}

model District {
  districtNo String @id @map("district_no")
  districtCode String @unique @map("district_code")
  districtThName String @map("district_th_name")
  districtEnName String @map("district_en_name")
  provinceNo String @map("province_no")

  subdistricts Subdistrict[]
  province Province @relation(fields: [provinceNo], references: [provinceNo])
  @@map("districts")
}

model Subdistrict {
  subdistrictsNo String @id @map("subdistricts_no")
  zipCode String  @map("zip_code")
  subdistrictThName String @map("subdistrict_th_name")
  subdistrictEnName String @map("subdistrict_en_name")
  districtNo String @map("district_no")

  district District @relation(fields: [districtNo], references: [districtNo])
  @@map("subdistricts")
}



model Sequence {
  id      String   @id
  prefix  String //LN CM
  nextVal  Int @map("next_val")
  updatedDt DateTime @default(now()) @updatedAt @map("updated_dt")
  @@map("sequences_config")
}
